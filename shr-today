#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""
today

(C) 2009 Lukas MÃ¤rdian <lukasmaerdian@googlemail.com>
(C) 2009 Sebastian Krzyszkowiak <seba.dos1@gmail.com>
GPLv2 or later

Simple screen-locking app using opimd.
"""

import elementary, ecore
import dbus, e_dbus
import time
import ConfigParser

class MainWindow:
    def __init__(self):
        self.config = ConfigParser.ConfigParser()
        self.config.read("/etc/shr-today.conf")
        self.SMOOTH_SUSPEND = self.config.get("general", "smooth_suspend")
        self.AUX_LOCK = self.config.get("general", "aux_lock")
        self.BACKGROUND = self.config.get("background", "image")
        self.locked = False
        self.proxies = False

        self.bus = dbus.SystemBus(mainloop = e_dbus.DBusEcoreMainLoop())
        self.bus.add_signal_receiver(self.dbus_suspend_handler, dbus_interface="org.freesmartphone.Usage", signal_name="SystemAction")
        if self.AUX_LOCK == "True":
            self.bus.add_signal_receiver(self.dbus_aux_handler, dbus_interface="org.freesmartphone.Device.Input", signal_name="Event")
        self.bus.add_signal_receiver(self.dbus_idle_handler, dbus_interface="org.freesmartphone.Device.IdleNotifier", signal_name="State")
        self.bus.add_signal_receiver(self.IncomingCall, dbus_interface="org.freesmartphone.GSM.Call", signal_name="CallStatus")
        self.bus.add_signal_receiver(self.NewMissedCalls, dbus_interface="org.freesmartphone.PIM.Calls", signal_name="NewMissedCalls")
        self.bus.add_signal_receiver(self.UnreadMessages, dbus_interface="org.freesmartphone.PIM.Messages", signal_name="UnreadMessages")
        self.bus.add_signal_receiver(self.gsmStatus, dbus_interface="org.freesmartphone.GSM.Network", signal_name="Status")
#        self.bus.add_signal_receiver(self.signalStatus, dbus_interface="org.freesmartphone.GSM.Network", signal_name="SignalStrength")
        self.bus.add_signal_receiver(self.profileChanged, dbus_interface="org.freesmartphone.Preferences", signal_name="Notify")
        self.bus.add_signal_receiver(self.batteryStatus, dbus_interface="org.freesmartphone.Device.PowerSupply", signal_name="Capacity")

        self.win = elementary.Window("shr-today", elementary.ELM_WIN_BASIC)
        self.win.title_set("Today")
        self.win.destroy = self.destroy

        bg = elementary.Background(self.win)
        self.win.resize_object_add(bg)
        bg.file_set(self.BACKGROUND)
        bg.size_hint_weight_set(1.0, 1.0)
        bg.show()

        mainbox = elementary.Box(self.win)
        mainbox.size_hint_weight_set(1.0, 1.0)
        self.win.resize_object_add(mainbox)
        mainbox.show()

        # Panel
        panelBox = elementary.Box(self.win)
        panelBox.size_hint_align_set(-1.0, 0.0)
        panelBox.horizontal_set(True)
        mainbox.pack_end(panelBox)
        panelBox.show()

        leftBox = elementary.Box(self.win)
        leftBox.size_hint_weight_set(0.5, 0.5)
        leftBox.size_hint_align_set(0.0, 0.0)
        leftBox.horizontal_set(True)
        panelBox.pack_end(leftBox)
        leftBox.show()
        self.gsmLabel = elementary.Label(self.win)
        self.gsmLabel.label_set("")
        leftBox.pack_end(self.gsmLabel)
        self.gsmLabel.show()

        rightBox = elementary.Box(self.win)
        rightBox.size_hint_weight_set(0.5, 0.5)
        rightBox.size_hint_align_set(1.0, 0.0)
        panelBox.pack_end(rightBox)
        rightBox.show()
        self.batteryLabel = elementary.Label(self.win)
        self.batteryLabel.label_set("")
        rightBox.pack_end(self.batteryLabel)
        self.batteryLabel.show()
        #/Panel

        timebox = elementary.Box(self.win)
        timebox.show()

        self.timeLabel = elementary.Label(self.win)
        self.timeLabel.label_set("")
        self.timeLabel.scale_set(5.5)
        timebox.pack_end(self.timeLabel)
        self.timeLabel.show()

        self.dateLabel = elementary.Label(self.win)
        self.dateLabel.label_set("")
        self.dateLabel.scale_set(1.75)
        timebox.pack_end(self.dateLabel)
        self.dateLabel.show()

        mainbox.pack_end(timebox)

        subBox = elementary.Box(self.win)
        subBox.size_hint_weight_set(1.0, 0.1)
        self.win.resize_object_add(subBox)
        mainbox.pack_end(subBox)
        subBox.show()

        self.profileLabel = elementary.Label(self.win)
        self.profileLabel.label_set("")
        self.profileLabel.scale_set(1.0)
        subBox.pack_end(self.profileLabel)
        self.profileLabel.show()

        self.IncomingCallLabel = elementary.Label(self.win)
        self.IncomingCallLabel.label_set("")
        self.IncomingCallLabel.scale_set(1.75)
        subBox.pack_end(self.IncomingCallLabel)
        self.IncomingCallLabel.show()

        self.callsLabel = elementary.Label(self.win)
        self.callsLabel.label_set("")
        self.callsLabel.scale_set(1.75)
        subBox.pack_end(self.callsLabel);
        self.callsLabel.show()

        self.messagesLabel = elementary.Label(self.win)
        self.messagesLabel.label_set("")
        self.messagesLabel.scale_set(1.75)
        subBox.pack_end(self.messagesLabel);
        self.messagesLabel.show()

        toggleframe = elementary.Frame(self.win)
        toggleframe.style_set('pad_medium')
        self.toggle = elementary.Toggle(self.win)
        self.toggle.label_set("")
        self.toggle.states_labels_set("unlock", "slide to unlock")
        self.toggle.scale_set(2.0)
        self.toggle.changed = self.toggleChanged
        self.toggle.state_set(False)
        toggleframe.content_set(self.toggle)
        toggleframe.show()
        mainbox.pack_end(toggleframe)
        self.toggle.show()

        self.make_proxies()

    ### functions ###
    def make_proxies(self):
        if not self.proxies:
            try:
                self.proxy = dbus.Interface(self.bus.get_object('org.freesmartphone.odeviced', '/org/freesmartphone/Device/Display/0'), dbus_interface='org.freesmartphone.Device.Display')
                self.contactsproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opimd', '/org/freesmartphone/PIM/Contacts'), dbus_interface='org.freesmartphone.PIM.Contacts')
                self.messagesproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opimd', '/org/freesmartphone/PIM/Messages'), dbus_interface='org.freesmartphone.PIM.Messages')
                self.callsproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opimd', '/org/freesmartphone/PIM/Calls'), dbus_interface='org.freesmartphone.PIM.Calls')
                self.batteryproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.odeviced', '/org/freesmartphone/Device/PowerSupply/battery'), dbus_interface='org.freesmartphone.Device.PowerSupply')
                self.profileproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opreferencesd', '/org/freesmartphone/Preferences'), dbus_interface='org.freesmartphone.Preferences')
                self.gsmproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.ogsmd', '/org/freesmartphone/GSM/Device'), dbus_interface='org.freesmartphone.GSM.Network')
                self.batteryStatus(self.batteryproxy.GetCapacity())
                self.profileChanged(self.profileproxy.GetProfile())
                self.gsmStatus(self.gsmproxy.GetStatus())
                self.NewMissedCalls(self.callsproxy.GetNewMissedCalls())
                self.UnreadMessages(self.messagesproxy.GetUnreadMessages())
                self.proxies = True
                return True
            except:
                return False
        else:
            return True

    def resolve_number(self, number):
        name = ''
        if self.make_proxies():
            name = self.contactsproxy.GetSingleEntrySingleField({'Phone':'tel:'+number}, 'Name')
        if not name:
            name = number
        return name

    def dbus_suspend_handler(self, name):
        """Locks the screen on suspend"""
        if name == "SUSPEND":
            if self.SMOOTH_SUSPEND == "True" and self.make_proxies():
                self.proxy.SetBacklightPower(False)
            self.lockScreen()
        elif name == "RESUME" and self.SMOOTH_SUSPEND == "True" and self.make_proxies():
            self.proxy.SetBacklightPower(True)

    def dbus_aux_handler(self, name, action, seconds):
        """Locks the screen on AUX keypress < 2 sec"""
        if name == "AUX" and action == "released" and int(seconds) < 2:
            if self.locked:
                self.unlockScreen()
            else:
                self.lockScreen()

    def dbus_idle_handler(self, name):
        """Locks the screen on FSO 'lock' signal"""
        if name == "lock":
            self.lockScreen()

    def batteryStatus(self, capacity):
        self.batteryLabel.label_set("Battery: "+str(capacity)+"%")

    def gsmStatus(self, args):
        """Updates GSM-Info on change"""
        if args['provider'] == " ":
            gsmProvider = "GSM"
        else:
            gsmProvider = args['provider']
        self.gsmLabel.label_set(elementary.Entry.utf8_to_markup(gsmProvider)+": "+str(args['strength'])+"%")

    def IncomingCall(self, *args):
        """Updates screen on incoming call"""
        if args[1] == "incoming":
            self.IncomingCallLabel.label_set(elementary.Entry.utf8_to_markup(self.resolve_number(args[2]['peer']))+" is calling")
        elif args[1] == "active":
            self.IncomingCallLabel.label_set("active call")
        elif args[1] == "release":
            self.IncomingCallLabel.label_set("")

    def NewMissedCalls(self, missedCalls):
        """Updates screen on new missed call"""
        if missedCalls == 0:
            self.callsLabel.label_set("")
        elif missedCalls == 1:
            self.callsLabel.label_set(str(missedCalls)+" missed call")
        else:
            self.callsLabel.label_set(str(missedCalls)+" missed calls")

    def UnreadMessages(self, unreadMessages):
        """Updates screen on new unread message"""
        if unreadMessages == 0:
            self.messagesLabel.label_set("")
        elif unreadMessages == 1:
            self.messagesLabel.label_set(str(unreadMessages)+" unread message")
        else:
            self.messagesLabel.label_set(str(unreadMessages)+" unread messages")

    def toggleChanged(self, obj, event, *args, **kargs):
        """Unlocks Screen if toggle is slided"""
        if self.toggle.state_get():
            self.unlockScreen()
            self.toggle.state_set(False)

    def lockScreen(self):
        """Locks the screen"""
        self.locked = True
        self.win.fullscreen_set(True)
        self.win.show()

    def unlockScreen(self):
        """Unlocks the screen"""
        self.locked = False
        self.win.hide()

    def profileChanged(self, currentProfile):
        if currentProfile == 'default':
            currentProfile = ''
        if currentProfile:
            currentProfile = elementary.Entry.utf8_to_markup(currentProfile.capitalize())
        self.profileLabel.label_set(currentProfile)

    def updateScreen(self):
        """Updates the time and date labels on the screen every 10 seconds"""
        t = time.localtime()
        self.timeLabel.label_set(time.strftime(self.config.get("format", "time"), t))
        self.dateLabel.label_set(time.strftime(self.config.get("format", "date"), t))
        ecore.timer_add(10, self.updateScreen)

    def destroy(self, obj, event, *args, **kargs):
        """Called when closing window"""
        self.unlockScreen()

if __name__ == "__main__":
    elementary.init()
    win = MainWindow()
    win.updateScreen()
    elementary.run()
    elementary.shutdown()
