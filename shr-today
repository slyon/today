#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""
today

(C) 2009 Lukas MÃ¤rdian <lukasmaerdian@googlemail.com>
(C) 2009 Sebastian Krzyszkowiak <seba.dos1@gmail.com>
GPLv2 or later

Simple screen-locking app using opimd.
"""

#!/usr/bin/env python

import ecore, ecore.evas, edje
import sys, os, time
import dbus, e_dbus
from functools import partial
import ConfigParser

class Main:
    def __init__(self):
        self.config = ConfigParser.ConfigParser()
        self.config.read("/etc/shr-today.conf")
        self.SMOOTH_SUSPEND = self.config.get("general", "smooth_suspend")
        self.AUX_LOCK = self.config.get("general", "aux_lock")
        self.UNLOCK_ON_INCOMING_CALL = self.config.get("general", "unlock_on_incoming_call")
        self.STYLE = self.config.get("style", "theme")
        self.WALLPAPER = self.config.get("style", "wallpaper")
        self.PROVIDER = self.config.get("gsm", "display_provider")
        self.SIM_ISSUER = self.config.get("gsm", "sim_issuer_as_provider")
        self.locked = False
        self.proxies = False

        self.bus = dbus.SystemBus(mainloop = e_dbus.DBusEcoreMainLoop())

        self.bus.add_signal_receiver(self.auxHandler,      dbus_interface="org.freesmartphone.Device.Input",         signal_name="Event")
        self.bus.add_signal_receiver(self.idleHandler,     dbus_interface="org.freesmartphone.Device.IdleNotifier",  signal_name="State")
        self.bus.add_signal_receiver(self.alarmChanged,    dbus_interface="org.freesmartphone.Device.RealtimeClock", signal_name="WakeupTimeChanged")
        self.bus.add_signal_receiver(self.batteryStatus,   dbus_interface="org.freesmartphone.Device.PowerSupply",   signal_name="Capacity")
        self.bus.add_signal_receiver(self.IncomingCall,    dbus_interface="org.freesmartphone.GSM.Call",             signal_name="CallStatus")
        self.bus.add_signal_receiver(self.gsmStatus,       dbus_interface="org.freesmartphone.GSM.Network",          signal_name="Status")
        self.bus.add_signal_receiver(self.signalStatus,    dbus_interface="org.freesmartphone.GSM.Network",          signal_name="SignalStrength")
        self.bus.add_signal_receiver(self.NewMissedCalls,  dbus_interface="org.freesmartphone.PIM.Calls",            signal_name="NewMissedCalls")
        self.bus.add_signal_receiver(self.NewDate,         dbus_interface="org.freesmartphone.PIM.Dates",            signal_name="NewDate")
        self.bus.add_signal_receiver(self.UnfinishedTasks, dbus_interface="org.freesmartphone.PIM.Tasks",            signal_name="UnfinishedTasks")
        self.bus.add_signal_receiver(self.UnreadMessages,  dbus_interface="org.freesmartphone.PIM.Messages",         signal_name="UnreadMessages")
        self.bus.add_signal_receiver(self.profileChanged,  dbus_interface="org.freesmartphone.Preferences",          signal_name="Notify")
        self.bus.add_signal_receiver(self.suspendHandler,  dbus_interface="org.freesmartphone.Usage",                signal_name="SystemAction")
        self.bus.add_signal_receiver(self.resourceStatus,  dbus_interface="org.freesmartphone.Usage",                signal_name="ResourceChanged")

        if ecore.evas.engine_type_supported_get("software_16_x11"):
            f = ecore.evas.SoftwareX11_16
        else:
			print "warning: x11-16 is not supported, fallback to x11"
			f = ecore.evas.SoftwareX11

        self.ee = f(w=480, h=640)
        self.ee.fullscreen = True
        self.ee.title = "SHR-Today"
        self.c = edje.Edje(self.ee.evas,file=self.STYLE,group="shr-today")

        #Swallow in the wallpaper
        self.wallpaper = self.c.evas.FilledImage()
        self.wallpaper.file_set(self.WALLPAPER)
        self.wallpaper.show()
        self.c.part_swallow('background',self.wallpaper)

        self.c.signal_callback_add("unlockScreen","slider",self.unlockScreen)
        self.c.show()

        self.alarm = 0
        self.updateScreen()
        ecore.timer_add(10, self.updateScreen)
        self.make_proxies()

    ### functions ###
    def make_proxies(self):
        if not self.proxies:
            try:
                self.proxy = dbus.Interface(self.bus.get_object('org.freesmartphone.odeviced',\
                    '/org/freesmartphone/Device/Display/0'), dbus_interface='org.freesmartphone.Device.Display')
                self.contactsproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opimd',\
                    '/org/freesmartphone/PIM/Contacts'), dbus_interface='org.freesmartphone.PIM.Contacts')
                self.messagesproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opimd',\
                    '/org/freesmartphone/PIM/Messages'), dbus_interface='org.freesmartphone.PIM.Messages')
                self.callsproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opimd',\
                    '/org/freesmartphone/PIM/Calls'), dbus_interface='org.freesmartphone.PIM.Calls')
                #self.datesproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opimd',\
                #    '/org/freesmartphone/PIM/Dates'), dbus_interface='org.freesmartphone.PIM.Dates')
                self.tasksproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opimd',\
                    '/org/freesmartphone/PIM/Tasks'), dbus_interface='org.freesmartphone.PIM.Tasks')
                self.batteryproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.odeviced',\
                    '/org/freesmartphone/Device/PowerSupply'), dbus_interface='org.freesmartphone.Device.PowerSupply')
                self.profileproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.opreferencesd',\
                    '/org/freesmartphone/Preferences'), dbus_interface='org.freesmartphone.Preferences')
                self.gsmproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.ogsmd',\
                    '/org/freesmartphone/GSM/Device'), dbus_interface='org.freesmartphone.GSM.Network')
                self.simproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.ogsmd',\
                    '/org/freesmartphone/GSM/Device'), dbus_interface='org.freesmartphone.GSM.SIM')
                self.alarmproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.odeviced',\
                    '/org/freesmartphone/Device/RTC/0'), dbus_interface='org.freesmartphone.Device.RealtimeClock')
                self.profileChanged(self.profileproxy.GetProfile())
                #self.NewDate(self.datesproxy.Query({'_lt_Begin':1255789306})) #FIXME: make some real query
                self.NewMissedCalls(self.callsproxy.GetNewMissedCalls())
                self.UnreadMessages(self.messagesproxy.GetUnreadMessages())
                self.UnfinishedTasks(self.tasksproxy.GetUnfinishedTasks())
                try:
                    self.batteryStatus(self.batteryproxy.GetCapacity())
                except:
                    self.batteryproxy = dbus.Interface(self.bus.get_object('org.freesmartphone.odeviced',\
                        '/org/freesmartphone/Device/PowerSupply/battery'), dbus_interface='org.freesmartphone.Device.PowerSupply')
                    self.batteryStatus(self.batteryproxy.GetCapacity())
                self.alarmproxy.GetWakeupTime(reply_handler=self.alarmChanged, error_handler=self.dbus_err)
                self.gsmStatus(self.gsmproxy.GetStatus())
                self.proxies = True
                return True
            except:
            	print "Error in make Proxies"
                return False
        else:
            return True

    def dbus_err(self, err):
        print "dbus error: "+str(err)

    def resolve_number(self, number):
        name = ''
        if self.make_proxies():
            name = self.contactsproxy.GetSingleEntrySingleField({'Phone':'tel:'+number}, 'Name')
        if not name:
            name = "Unknown Number"
        return name

    def suspendHandler(self, name):
        """Locks the screen on suspend"""
        if name == "SUSPEND" or name == "suspend":
            if self.SMOOTH_SUSPEND == "True" and self.make_proxies():
                self.proxy.SetBacklightPower(False)
            self.lockScreen()
        elif (name == "RESUME" or name == "resume") and self.SMOOTH_SUSPEND == "True" and self.make_proxies():
            self.proxy.SetBacklightPower(True)

    def auxHandler(self, name, action, seconds):
        """Locks the screen on AUX keypress < 2 sec"""
        if name == "AUX" and action == "released" and int(seconds) < 2 and self.AUX_LOCK == "True":
            if self.locked:
                self.unlockScreen()
            else:
                self.lockScreen()

    def idleHandler(self, name):
        """Locks the screen on FSO 'lock' signal"""
        if name == "lock":
            self.lockScreen()

    def resourceStatus(self, resource, state, *args, **kargs):
        if resource=='GSM':
            if not state:
                self.gsmProvider(None)
                self.signalStatus(-1)
        elif resource=='Bluetooth':
            if state:
                self.c.signal_emit("","activateBluetoothResource")
            else:
                self.c.signal_emit("","deactivateBluetoothResource")
        elif resource=='WiFi':
            if state:
                self.c.signal_emit("","activateWifiResource")
            else:
                self.c.signal_emit("","deactivateWifiResource")
        elif resource=='GPS':
            if state:
                self.c.signal_emit("","activateGpsResource")
            else:
                self.c.signal_emit("","deactivateGpsResource")
        elif resource=='CPU':
            if state:
                self.c.signal_emit("","activateCpuResource")
            else:
                self.c.signal_emit("","deactivateCpuResource")
        elif resource=='Display':
            if state:
                self.c.signal_emit("","activateDisplayResource")
            else:
                self.c.signal_emit("","deactivateDisplayResource")

    def batteryStatus(self, capacity):
        self.c.signal_emit(str(capacity),"batteryPowerChange")

    def signalStatus(self, strength):
        self.c.signal_emit(str(strength),"gsmSignalChange")

    def gsmProvider(self, provider, *args, **kargs):
        """Reply-Handler for the SimIssuer/GsmProvider"""
        self.c.part_text_set("gsmProvider", provider)

    def gsmStatus(self, gsmStatus):
        """Updates GSM-Info on change"""
        self.c.signal_emit(str(gsmStatus['strength']),"gsmSignalChange")
        if self.PROVIDER == "True":
            if ( self.SIM_ISSUER == "True" ) and ( gsmStatus.get('registration') == "home" ):
                self.simproxy.GetIssuer(reply_handler=self.gsmProvider, error_handler=partial(self.gsmProvider, gsmStatus.get('provider')))
            elif ( len(gsmStatus['provider'] > 1 ) and ( gsmStatus['provider'] != ' ' ):
                self.gsmProvider(gsmStatus['provider'])
            else:
                self.gsmProvider('unknown')

    def IncomingCall(self, *args):
        """Updates screen on incoming call"""
        if args[1] == "incoming":
            if self.UNLOCK_ON_INCOMING_CALL == "True":
                self.unlockScreen()
            self.c.signal_emit("","activate_incomingCall")
            self.c.part_text_set("incomingCallHeading", "Incoming Call:")
            self.c.part_text_set("incomingCallLine1", u"\u200E" + self.resolve_number(args[2]['peer']) + " is calling")
            self.c.part_text_set("incomingCallLine2", args[2]['peer'])
        elif args[1] == "active":
            self.c.signal_emit("","activate_incomingCall")
            self.c.part_text_set("incomingCallHeading", "Active Call:")
        elif args[1] == "release":
            self.c.signal_emit("","deactivate_incomingCall")
            self.c.part_text_set("incomingCallHeading", "")
            self.c.part_text_set("incomingCallLine1", "")
            self.c.part_text_set("incomingCallLine2", "")

    def NewMissedCalls(self, missedCalls):
        """Updates screen on new missed call"""
        if missedCalls == 0:
            self.c.signal_emit("","hideMissedCalls")
            self.c.part_text_set("missedCallsLabel", "")
        else:
            self.c.signal_emit("","showMissedCalls")
            self.c.part_text_set("missedCallsLabel", str(missedCalls))

    def NewDate(self, path):
        """Updates screen new date"""
        print 'New Date:', path

    def UnfinishedTasks(self, unfinishedTasks):
        """Updates screen on new task"""
        if unfinishedTasks == 0:
            self.c.signal_emit("","hideUnfinishedTasks")
            self.c.part_text_set("unfinishedTasksLabel", "")
        else:
            self.c.signal_emit("","showUnfinishedTasks")
            self.c.part_text_set("unfinishedTasksLabel", str(unfinishedTasks))

    def UnreadMessages(self, unreadMessages):
        """Updates screen on new unread message"""
        if unreadMessages == 0:
            self.c.signal_emit("","hideUnreadMessages")
            self.c.part_text_set("unreadMessagesLabel", "")
        else:
            self.c.signal_emit("","showUnreadMessages")
            self.c.part_text_set("unreadMessagesLabel", str(unreadMessages))

    def lockScreen(self):
        """Locks the screen"""
        self.make_proxies()
        self.locked = True
        self.ee.show()

    def unlockScreen(self, obj="", signal="", source=""):
        """Unlocks the screen"""
        self.locked = False
        self.ee.hide()

    def profileChanged(self, currentProfile):
        if currentProfile == 'default':
            self.c.part_text_set("profile", "")
        else:
            self.c.part_text_set("profile", currentProfile.capitalize())

    def alarmChanged(self, rtcWakeupTime):
        self.alarm = rtcWakeupTime
        if rtcWakeupTime > time.mktime(time.localtime()):
            wakeupTime = time.localtime(float(rtcWakeupTime))
            self.c.signal_emit("","activateAlarm")
        else:
            self.c.signal_emit("","deactivateAlarm")

    def updateScreen(self):
        """Updates the time and date labels on the screen every 10 seconds"""
        t = time.localtime()
        self.c.part_text_set("time", time.strftime(self.config.get("format", "time"), t))
        self.c.part_text_set("date", time.strftime(self.config.get("format", "date"), t))
        self.c.size = self.ee.evas.size
        if self.alarm < time.mktime(t):
            self.c.signal_emit("","deactivateAlarm")
        return True

    def destroy(self, obj, event, *args, **kargs):
        """Called when closing window"""
        if self.config.get("general", "unlock_by_close") == "True":
            self.unlockScreen()
        else:
            pass

if __name__ == "__main__":
    win = Main()
    ecore.main_loop_begin();
